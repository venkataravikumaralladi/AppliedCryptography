https://wiki.openssl.org/index.php/Command_Line_Utilities

https://www.keycdn.com/blog/openssl-tutorial

https://users.dcc.uchile.cl/~pcamacho/tutorial/crypto/openssl/openssl_intro.html

https://www.openssl.org/docs/man1.1.1/man1/openssl-pkeyutl.html

https://pagefault.blog/2019/04/22/how-to-sign-and-verify-using-openssl/

https://gist.github.com/kyledrake/d7457a46a03d7408da31

openssl version -a

1. openssl rand -hex 32 

2. In present openssl version 3.0.0.7 DES is not supported.
	openssl enc -des-cbc -in secret_message.txt -out simple-cipher-message-des.bin 
                    -K 64545673  -iv 656789 -provider legacy -provider default
	
	enc: unable to load provider legacy
	Hint: use -provider-path option or OPENSSL_MODULES environment variable.
	EC090000:error:12800067:DSO support routines:win32_load:could not load the shared library:crypto\dso\dso_win32.c:108:
                                filename(C:\Program Files\OpenSSL\lib\ossl-modules\legacy.dll)
	EC090000:error:12800067:DSO support routines:DSO_load:could not load the shared library:crypto\dso\dso_lib.c:162:
	EC090000:error:078C0105:common libcrypto routines:provider_init:init fail:crypto\provider_core.c:903:name=legacy

3. To encode content specied in file secret_message.txt
        openssl enc -aes-256-cbc -in secret_message.txt
                            -out simple-cipher-message.enc
                            -K 000e5f9fc289b6f2578716b3aadd32f14c280ce67b56f2e0216d5df36f497853 
                            -iv 8dd07b1a310a3d3d2057e21737f15fa018b775fdf91e795cc925ee22744588d4 
   Above K and initialization vector values are generated by openssl rand commands

4. To see generated encrypted text
	cat simple-cipher-message.enc

    And see in binary notation we can see below command
	xxd -b simple-cipher-message.enc

5.To decode above encrpted text
  openssl enc -aes-256-cbc -d -in simple-cipher-message.enc 
              -K 000e5f9fc289b6f2578716b3aadd32f14c280ce67b56f2e0216d5df36f497853
              -iv 8dd07b1a310a3d3d2057e21737f15fa018b775fdf91e795cc925ee22744588d4  

6. To check speed of various algorithms

	openssl speed aes-256-cbc

7. To hash a content.

	openssl md5 simple_hash_message.txt

8. To check speed of various hash algorithms

	openssl speed md5

9. Public-Private key RSA algorithm
	By running following command we now have a file called key.pem containing a public key and private key

		openssl genrsa -out key.pem 1024

	To Generate Public key component from file generated key.pem run following command

		openssl rsa -in key.pem -pubout -out pub-key.pem

10. To encrypt the file using public key

	openssl pkeyutl -encrypt -in simple-rsa-message.txt -pubin -inkey pub-key.pem -out sample-rsa-msg-enc-pubkey.bin.

     Then to decrypt the encrypted output using private key as below

11. Digital signatures

	Step1: Calculate hash value of message 

	openssl dgst -binary -sha256 simple-digital-signature-message.txt > simple-digital-sig-digest.hash

	Step 2: Sign the hash value using the private key
	
	openssl pkeyutl -sign -in simple-digital-sig-digest.hash -inkey key.pem -pkeyopt digest:sha256 -keyform PEM -out simple-digital-msg-signature.sign

	Step 3: Verify on recevier side using public key

	openssl dgst -verify pub-key.pem -keyform PEM -sha256 -signature simple-digital-msg-signature.sign  simple-digital-signature-message.txt

12. Certificates: Certificates are signed by certificate authoritity (CA) or it can be self signed certificate which we can create for our purpose.

	Step1: Create your own private key
			This is used later to send your Certificate Signing Request (CSR) to Certificate Authority (CA)
		
		openssl genrsa -out mykeyforcert.pem

	Step 2: To create a CSR
			-newkey rsa:2048 tells OpenSSL to generate a new 2048-bit RSA private key

			Below command creates our CSR request vrkserver.pm from input provided key mykerforcert.pm which we created above. Here OpenSSL
			gathers information about yourself or your organization like identity, domain name, location, and so on.
			Remember that inclusion of the -new option is necessary since you are creating a new CSR from an existing key
			
				
				openssl req -new  -key mykeyforcert.pem -out vrkserver.pm

			Extra attributes are not really a concern to us if you are not publishing your CSR to real CA
			The output file vrkserver.pm contains all the information we have entered in special encoded way. Now
			there are two options that we can issue your CSR to a real CA, pay some money and wait for certificate
			to come or another option is to create a self signed certificate

	Step 3: To self sign a certificate with out CA we need several things

			step1: We need our private key as we are signing it ourselves.
			Step2: We need CSR signing request which includes all our data
			Step3: We will save it into a file format or certificate format which we use is X509

			openssl x509 -in vrkserver.pm -out vrkcert_selfsigned.pem -req -signkey mykeyforcert.pem -days 365

			Above will generate vrkcert_selfsigned.pem certificate. After this we don't require verkserver.pm any more

13. To view a certificate's content in plain text, use:

		openssl x509 -text -noout -in vrkcert_selfsigned.pem

14. Now end user can verify the certificate if end user has public key of my mykeyforcert.pem

	I am getting error with following command check help here: https://gist.github.com/kyledrake/d7457a46a03d7408da31

	openssl verify -verbose -x509_strict -CAfile mykeyforcert.pem vrkcert_selfsigned.pem
			

